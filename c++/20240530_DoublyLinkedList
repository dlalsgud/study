// 2024.05.27 Partition 반복문 수정(루프 중간에 NULL 체크 추가)
// 2024.05.28 left와 right가 교차할 때 교환이 필요하지 않은 경우 
// 2024.05.29 FreeList 함수 작성
// 2024.05.30 DeleteNode 함수에서 메모리 해제 기능을 따로 함수로 정의

#include <iostream>
#include <cstdlib>
#include <ctime>

#include <crtdbg.h>

#define MAX_SIZE 10

#if _DEBUG
#define new new(_NORMAL_BLOCK,__FILE__,__LINE__)
#define malloc(s) _malloc_dbg(s,_NORMAL_BLOCK,__FILE__,__LINE__)
#endif

typedef struct Node {
    int data;
    Node* prev;
    Node* next;
} Node;

typedef struct LinkedList {
    Node* head;
    Node* tail;
} LinkedList;

LinkedList* Init()
{
    LinkedList* list = new LinkedList;

    list->head = NULL;
    list->tail = NULL;

    return list;
}

void swap(int& a, int& b)
{
    int temp = a;
    a = b;
    b = temp;
}

Node* Partition(Node* low, Node* high)
{
    int pivot = low->data;

    Node* left = low;
    Node* right = high;

    while (true)
    {
        while (left != NULL && left != high && left->data <= pivot)
            left = left->next;
        while (right != NULL && right != low && right->data > pivot)
            right = right->prev;

        if (left == NULL || right == NULL || left == right || left == right->next)
            break;

        swap(left->data, right->data);
    }

    swap(low->data, right->data);

    return right;
}

void QuickSort(Node* low, Node* high)
{
    if (high != NULL && low != high && low != high->next)
    {
        Node* pivot = Partition(low, high);

        if (pivot != NULL)
        {
            QuickSort(low, pivot->prev);
            QuickSort(pivot->next, high);
        }
    }
}

void InsertNode(LinkedList* list, int value)
{
    Node* newNode = new Node;

    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = list->tail;

    if (list->tail != NULL)
        list->tail->next = newNode;
    else
        list->head = newNode;

    list->tail = newNode;
}

void Del(Node* delNode, Node*& ListTail)
{
    Node* nextNode = delNode->next;

    if (delNode->prev != NULL)
        delNode->prev->next = delNode->next;
    else
        delNode = delNode->next;

    if (delNode->next != NULL)
        delNode->next->prev = delNode->prev;
    else
        ListTail = delNode->prev;

    if (delNode != NULL) {
        delete delNode;
        delNode = NULL;
    }
        
}

int DeleteNode(LinkedList* list, int value)
{
    Node* delNode = list->head;
    int nDelete = 0;

    while (delNode != NULL)
    {
        if (delNode->data != value) {
            delNode = delNode->next;
            continue;
        }

        if (delNode->data == value) {
            Node* toDelete = delNode;
            delNode = delNode->next;
       
            Del(toDelete, list->tail);
            nDelete++;
        }
       
    }
    return nDelete;
}

void PrintList(LinkedList* list)
{
    Node* current = list->head;
    while (current != NULL) {
        std::cout << current->data << " -> ";
        current = current->next;
    }
    std::cout << "NULL" << std::endl;
}

// 모든 노드 메모리 해제
void FreeList(LinkedList* list)
{
    Node* current = list->head;
    Node* next;

    while (current != NULL)
    {
        next = current->next;
        delete current;
        current = next;
    }
    delete list;
}

int main()
{
    srand(time(NULL));

    LinkedList* list = Init();
    int i = 0;
    int nDelCnt = 0;

    for (i; i < MAX_SIZE; i++)
    {
        InsertNode(list, rand() % 10);
    }

    PrintList(list);

    nDelCnt = DeleteNode(list, 5);
    PrintList(list);
    printf("deldete count: %d\n", nDelCnt);


    QuickSort(list->head, list->tail);
    PrintList(list);

    FreeList(list);

    _CrtDumpMemoryLeaks();

    return 0;
}
